#!/bin/bash

# PROJECTPATH contains the full
# directory path of the project itself
PROJECTPATH=$(pwd)

# SCRIPTNAME contains the name
# of the current script (e.g. "server")
SCRIPTNAME="bin/$(basename $0)"

# Check availability of docker
hash docker 2>/dev/null || { echo >&2 "warp framework requires \"docker\""; exit 1; }

# Check availability of docker-compose
hash docker-compose 2>/dev/null || { echo >&2 "warp framework requires \"docker-compose\""; exit 1; }

include_warp_framework() {
    
    # INCLUDE VARIABLES
    . "$PROJECTPATH/.warp/variables.sh"
    # INCLUDE WARP FRAMEWORK
    . "$PROJECTPATH/.warp/includes.sh"
}

if [ -d $PROJECTPATH/.warp ]; then
    include_warp_framework
fi;



init_main() {

    if [ ! -d $PROJECTPATH/.warp ]; then
        warp_setup
        exit 0;
    fi;

    echo ""
    warp_banner
    echo ""

    if [ -f $DOCKERCOMPOSEFILE ] || [ -f $ENVIRONMENTVARIABLESFILESAMPLE ]; then

        if [ ! -f $ENVIRONMENTVARIABLESFILE ]; then
            # INIT MODE DEVELOPER
            . "$WARPFOLDER/setup/init/developer.sh"
        else
            INFRA_FILES_ERROR="FALSE"
            if [ -f $DOCKERCOMPOSEFILE ]; then
                echo "* Comprobando archivo $(basename $DOCKERCOMPOSEFILE) $(warp_message_ok [ok])"
            else
                INFRA_FILES_ERROR="TRUE"
                echo "* Comprobando archivo $(basename $DOCKERCOMPOSEFILE) $(warp_message_error [error])"
            fi; 
            
            if [ -f $ENVIRONMENTVARIABLESFILE ]; then
                echo "* Comprobando archivo $(basename $ENVIRONMENTVARIABLESFILE) $(warp_message_ok [ok])"
            else
                INFRA_FILES_ERROR="TRUE"
                echo "* Comprobando archivo $(basename $ENVIRONMENTVARIABLESFILE) $(warp_message_error [error])"
            fi;

            if [ $INFRA_FILES_ERROR = "TRUE" ]; then
                warp_message_warn "-- Ambos archivos ($(basename $DOCKERCOMPOSEFILE) y $(basename $ENVIRONMENTVARIABLESFILE)) deben existir para poder inicializar los contenedores. $(warp_message_error [error])"
                # warp_message_warn "-- Si queres inicializar un proyecto desde cero, elimina los archivos $(basename $DOCKERCOMPOSEFILE) y $(basename $ENVIRONMENTVARIABLESFILE). Luego volve a ejecutar el comando init "
                exit
            fi
        fi
    else
        warp_message_info "* Comenzando la instalacion inicial\n"
        . "$WARPFOLDER/setup/init/service.sh"
        . "$WARPFOLDER/setup/webserver/webserver.sh"
        . "$WARPFOLDER/setup/php/php.sh"
        . "$WARPFOLDER/setup/init/volumes.sh"
        . "$WARPFOLDER/setup/mysql/database.sh"
        . "$WARPFOLDER/setup/elasticsearch/elasticsearch.sh"
        . "$WARPFOLDER/setup/redis/redis.sh"
        . "$WARPFOLDER/setup/networks/networks.sh"
        . "$WARPFOLDER/setup/init/info.sh"
    fi;

    # TODO: CHECK FOLDERS AND PERMISSIONS 

}

help() {
    
    if [ -d $PROJECTPATH/.warp ]; then
        warp_banner

        . $PROJECTPATH/.warp/bin/help.sh

        help_main

        for filename in $PROJECTPATH/.warp/bin/*_help.sh; do
            . "$filename"
            $(basename $filename .sh) # execute default function
        done

        help_usage
    else
        echo "WARP-ENGINE has not been installed yet. Please run ./warp init"
    fi;
}


#######################################
# Print the usage information for the
# server control script
# Globals:
#   SCRIPTNAME
# Arguments:
#   None
# Returns:
#   None
#######################################
usage() {
  echo "Utility for controlling dockerized Web projects\n"
  echo "Usage:\n\n  $SCRIPTNAME <action> [options...] <arguments...>"
  echo ""
}


function warp_info()
{
    mysql_main info   
}

function func_test()
{
    warp_message_ok "Este es un mensaje de OK!"
    warp_message_error "Este es un mensaje de ERROR!"
    warp_message_info "Este es un mensaje de INFO!"
    warp_message_warn "Este es un mensaje de WARN!"

    # warp_net_get_used_ports

    if ! warp_net_port_in_use 80 ; then
        echo "Puerto Libre"
    else
        echo "Puerto Ocupado"
    fi;

}

function warp_setup()
{
    # Create destination folder
    DESTINATION="."
    #mkdir -p ${DESTINATION}

    # Find __ARCHIVE__ maker, read archive content and decompress it
    ARCHIVE=$(awk '/^__ARCHIVE__/ {print NR + 1; exit 0; }' "${0}")

    echo "Instalando Warp, aguarde unos momentos"
    sleep 1
    tail -n+${ARCHIVE} "${0}" | tar xpJ -C ${DESTINATION}
    if [ -d $PROJECTPATH/.warp ]; then    
        echo "Instalacion exitosa!, iniciando Instalacion.."
        sleep 1
        # Init Instalation
        include_warp_framework
        init_main
    else
        echo "No se puede instalar Warp"
    fi;
}

case "$1" in
    init)
    init_main
    ;;

    mysql)
    shift 1
    mysql_main $*
    ;;

    php)
    shift 1
    php_main $*
    ;;

    start)
    start_main $*
    ;;

    stop)
    stop_main $*
    ;;

    ps)
    ps_main $*
    ;;

    info)
    warp_info
    ;;

    composer)
    composer_main $*
    ;;

    magento)
    magento_main $*
    ;;

    logs)
    logs_main $*
    ;;

    reset)
    reset_main $*
    ;;

    *)
    help
    ;;
esac

exit 0

__ARCHIVE__
